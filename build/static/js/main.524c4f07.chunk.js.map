{"version":3,"sources":["Wheel.js","App.js","index.js"],"names":["Wheel","props","state","list","colorList","radius","rotate","easeOut","angle","top","offset","net","result","spinning","topPosition","num","topSpot","degreesOff","Math","PI","setState","spin","randomSpin","floor","random","setTimeout","getResult","netRotation","travel","count","length","reset","this","renderWheel","numOptions","arcSize","i","text","renderSector","index","start","arc","color","canvas","document","getElementById","ctx","getContext","x","width","y","height","startAngle","endAngle","baseSize","textRadius","beginPath","lineWidth","strokeStyle","font","fillStyle","stroke","save","translate","cos","sin","fillText","measureText","restore","r","g","b","id","React","Component","App","useState","shown","setShown","disabled","setDisabled","wheelInitialRotation","setWheelInitialRotation","randomInitialRotation","setRandomInitialRotation","rotationDeg","setRotationDeg","segments","setSegments","segColors","setSegColors","useEffect","Random","integer","_segments","_segColors","push","segmentTurn","className","src","style","transform","Button","variant","onClick","is-shown","toString","alt","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.524c4f07.chunk.js","sourcesContent":["import React from 'react'\n\nexport default class Wheel extends React.Component {\n  constructor(props){\n    super(props)\n  }\n\n  state = {\n    list: this.props.list,\n    colorList: this.props.colorList,\n    // list: [\"$100\", \"$500\", \"$9,999\", \"$1\", \"$60\", \"$1,000\", \"$4.44\"],\n    // list: [\"$100\",\"$500\",\"$9,999\",\"$1\",\"$60\"],\n    radius: 75, // PIXELS\n    rotate: 0, // DEGREES\n    easeOut: 0, // SECONDS\n    angle: 0, // RADIANS\n    top: null, // INDEX\n    offset: null, // RADIANS\n    net: null, // RADIANS\n    result: null, // INDEX\n    spinning: false\n  };\n\n  componentDidMount() {\n    // generate canvas wheel on load\n    this.renderWheel();\n  }\n\n  renderWheel() {\n    // determine number/size of sectors that need to created\n    let numOptions = this.state.list.length;\n    let arcSize = (2 * Math.PI) / numOptions;\n    this.setState({\n      angle: arcSize\n    })\n\n    // get index of starting position of selector\n    this.topPosition(numOptions, arcSize);\n\n    // dynamically generate sectors from state list\n    let angle = 0;\n    for (let i = 0; i < numOptions; i++) {\n      let text = this.state.list[i];\n      this.renderSector(i + 1, text, angle, arcSize, this.state.colorList[i]); //this.getColor()\n      angle += arcSize;\n    }\n  }\n\n  topPosition = (num, angle) => {\n    // set starting index and angle offset based on list length\n    // works upto 9 options\n    let topSpot = null;\n    let degreesOff = null;\n    if (num === 9) {\n      topSpot = 7;\n      degreesOff = Math.PI / 2 - angle * 2;\n    } else if (num === 8) {\n      topSpot = 6;\n      degreesOff = 0;\n    } else if (num <= 7 && num > 4) {\n      topSpot = num - 1;\n      degreesOff = Math.PI / 2 - angle;\n    } else if (num === 4) {\n      topSpot = num - 1;\n      degreesOff = 0;\n    } else if (num <= 3) {\n      topSpot = num;\n      degreesOff = Math.PI / 2;\n    }\n\n    this.setState({\n      top: topSpot - 1,\n      offset: degreesOff\n    });\n  };\n\n  renderSector(index, text, start, arc, color) {\n    // create canvas arc for each list element\n    let canvas = document.getElementById(\"wheel\");\n    let ctx = canvas.getContext(\"2d\");\n    let x = canvas.width / 2;\n    let y = canvas.height / 2;\n    let radius = this.state.radius;\n    let startAngle = start;\n    let endAngle = start + arc;\n    let angle = index * arc;\n    let baseSize = radius * 3.33;\n    let textRadius = baseSize - 150;\n\n    ctx.beginPath();\n    ctx.arc(x, y, radius, startAngle, endAngle, false);\n    ctx.lineWidth = radius * 2;\n    ctx.strokeStyle = color;\n\n    ctx.font = \"17px Arial\";\n    ctx.fillStyle = \"white\";\n    ctx.stroke();\n\n    ctx.save();\n    ctx.translate(\n      baseSize + Math.cos(angle - arc / 2) * textRadius,\n      baseSize + Math.sin(angle - arc / 2.65) * textRadius\n    );\n    ctx.rotate(angle - arc / 2 - Math.PI * 2);\n    ctx.fillText(text, -ctx.measureText(text).width / 2, 0);\n    ctx.restore();\n  }\n\n  getColor() {\n    // randomly generate rbg values for wheel sectors\n    let r = Math.floor(Math.random() * 255);\n    let g = Math.floor(Math.random() * 255);\n    let b = Math.floor(Math.random() * 255);\n    return `rgba(${r},${g},${b},0.4)`;\n  }\n\n  spin = () => {\n    // set random spin degree and ease out time\n    // set state variables to initiate animation\n    let randomSpin = Math.floor(Math.random() * 900) + 500;\n    this.setState({\n      rotate: randomSpin,\n      easeOut: 2,\n      spinning: true\n    });\n\n    // calcalute result after wheel stops spinning\n    setTimeout(() => {\n      this.getResult(randomSpin);\n    }, 2000);\n  };\n\n  getResult = spin => {\n    // find net rotation and add to offset angle\n    // repeat substraction of inner angle amount from total distance traversed\n    // use count as an index to find value of result from state list\n    const { angle, top, offset, list } = this.state;\n    let netRotation = ((spin % 360) * Math.PI) / 180; // RADIANS\n    let travel = netRotation + offset;\n    let count = top + 1;\n    while (travel > 0) {\n      travel = travel - angle;\n      count--;\n    }\n    let result;\n    if (count >= 0) {\n      result = count;\n    } else {\n      result = list.length + count;\n    }\n\n    // set state variable to display result\n    this.setState({\n      net: netRotation,\n      result: result\n    });\n  };\n\n  reset = () => {\n    // reset wheel and result\n    this.setState({\n      rotate: 0,\n      easeOut: 0,\n      result: null,\n      spinning: false\n    });\n  };\n\n  render() {\n    return (\n      <canvas\n        id=\"wheel\"\n        width=\"500\"\n        height=\"500\"\n      />\n    )\n  }\n}\n","import React from 'react'\nimport './App.css'\nimport Button from '@material-ui/core/Button'\nimport { Random } from \"random-js\"\nimport Wheel from './Wheel'\n\nfunction App() {\n  const [shown, setShown] = React.useState(false)\n  const [disabled, setDisabled] = React.useState(false)\n  const [wheelInitialRotation, setWheelInitialRotation] = React.useState(0)\n  const [randomInitialRotation, setRandomInitialRotation] = React.useState(0)\n  const [rotationDeg, setRotationDeg] = React.useState(0)\n  const [segments, setSegments] = React.useState()\n  const [segColors, setSegColors] = React.useState()\n\n  const handleStart = () => {\n    setDisabled(true)\n    setRotationDeg((360*new Random().integer(3,5))-randomInitialRotation)\n    setTimeout(() => setShown(true), 8000)\n  }\n\n  React.useEffect(() => {\n    let length = new Random().integer(4,8)*2\n    let _segments = []\n    let _segColors = []\n    for(let i = 0; i < length; i++) {\n      _segments.push(i === 0 ? 'ČZU' : (i % 2 === 0 ? 'FIT' : 'FEL' ))\n      _segColors.push(i === 0 ? '#048e0e' : (i % 2 === 0 ? '#2b048e' : '#8e044b' ))\n    }\n    setSegments(_segments)\n    setSegColors(_segColors)\n    let segmentTurn = (360/_segments.length)\n    setWheelInitialRotation(-(segmentTurn/2))\n    setRandomInitialRotation(new Random().integer(segmentTurn, 360-segmentTurn))\n  }, [])\n\n\n  return (\n    <>\n      <div className=\"App\">\n        <div className=\"wheel\">\n          <div className=\"picker\"><img src=\"palec.jpeg\" height=\"50px\"></img></div>\n          <div className=\"rotation-part\" style={{transform: `rotate(${rotationDeg}deg)`}}>\n            <div style={{transform: `rotate(${randomInitialRotation}deg)`}}>\n              <div className=\"wheel-component-outer\" style={{transform: `rotate(${wheelInitialRotation}deg)`}}>\n                <div className=\"wheel-component\">\n                  {segments && segColors && <Wheel list={segments} colorList={segColors} /> }\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"info\">\n          <h1>FIT или FEL?</h1>\n          <p>\n            Крутите колесо удачи, чтобы определить свою судьбу!\n          </p>\n          <Button variant='contained' color='primary' disabled={disabled} onClick={handleStart}>Крутить!</Button>\n        </div>\n      </div>\n      <img src=\"czu.png\" className=\"fullscreen\" is-shown={shown.toString()} alt=\"До встречи в ČZU\"/>\n    </>\n  )\n}\n\nexport default App;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}